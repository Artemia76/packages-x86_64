diff --git a/scripts/build-collection.in b/scripts/build-collection.in
index 870f2af..cb60c79 100644
--- a/scripts/build-collection.in
+++ b/scripts/build-collection.in
@@ -1,5 +1,5 @@
 #!/bin/bash
-#  Copyright (c) 2016 by NuTyX team (http://nutyx.org)
+#  Copyright (c) 2016-2019 by NuTyX team (http://nutyx.org)
 #
 #  This program is free software; you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
@@ -155,7 +155,7 @@ export CFLAGS="-O2 -pipe"
 export CXXFLAGS="${CFLAGS}"
 export MAKEFLAGS="-j$(getconf _NPROCESSORS_ONLN)"
 PKGMK_GROUPS=(devel man doc service)
-PKGMK_LOCALES=(ar fr de it es hi ja nl pt da nn sv fi tr ru pl zh_CN)
+PKGMK_LOCALES=(ar fi fr cs da de is it el es ga gl hi hr hu ja lt lv nl nn pt pl ro ru sq sk sl sr sv th tr uk vi zh_CN)
 PKGMK_CLEAN="no"
 PKGMK_KEEP_SOURCES="yes"
 PKGMK_SOURCE_DIR="/sources"
diff --git a/scripts/pkgmk.conf b/scripts/pkgmk.conf
index 55cefe0..0687177 100644
--- a/scripts/pkgmk.conf
+++ b/scripts/pkgmk.conf
@@ -43,7 +43,7 @@ esac
 # Those settings are used for a bot
 #
 # PKGMK_GROUPS=(devel man doc service)
-# PKGMK_LOCALES=(ar fr de it es hi ja nl pt da nn sv fi tr ru pl zh_CN)
+# PKGMK_LOCALES=(ar fi fr cs da de is it el es ga gl hi hr hu ja lt lv nl nn pt pl ro ru sq sk sl sr sv th tr uk vi zh_CN)
 # PKGMK_CLEAN="no"
 # PKGMK_KEEP_SOURCES="yes"
 # PKGMK_SOURCE_DIR="/tmp"
diff --git a/scripts/pkgmk.in b/scripts/pkgmk.in
index f4fab35..343bfa0 100644
--- a/scripts/pkgmk.in
+++ b/scripts/pkgmk.in
@@ -4,7 +4,7 @@
 # 
 #  Copyright (c) 2000-2005 Per Liden
 #  Copyright (c) 2006-2013 by CRUX team (http://crux.nu)
-#  Copyright (c) 2013-2016 by NuTyX team (http://nutyx.org)
+#  Copyright (c) 2013-2019 by NuTyX team (http://nutyx.org)
 
 #  This program is free software; you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
@@ -971,28 +971,29 @@ build_package() {
 			fi
 			j=0
 		done
-		if [ ! -z PKGMK_LOCALES ]; then
-			local DIR PKGMK_LOCALE LOC
-			for DIR in usr/share/locale opt/*/share/locale; do
-				if [ -d $DIR ]; then
-					for LOC in `cd $DIR && ls`; do
-						# Need to double check because glibc for example creates a file in this directory
-						if [ -d $DIR/$LOC ];then
-							for PKGMK_LOCALE in ${PKGMK_LOCALES[@]}; do
-								if [ "$PKGMK_LOCALE" == "$LOC" ]; then
-									if [ "$1" != "$TARGET" ]; then
-										bsdtar -r -f $PKGMK_PACKAGE_DIR/${name}.${LOC}${PKGMK_BUILDVER}any.${PKGMK_PACKAGE_EXT} \
-										$DIR/$LOC || abort_on_build "${name}.${LOC}${PKGMK_BUILDVER}any.${PKGMK_PACKAGE_EXT}"
-									fi
-									rm -rf $DIR/$LOC
-									break
-								fi
-							done
-						fi
-					done
+		for group in ${PKGMK_LOCALES[@]}; do
+			if [ "`type -t locale_${group}`" == "function" ]; then
+				BUILD_SUCCESSFUL="no"
+				(set -e -x ;locale_${group})
+				j=1
+				if [ $? = 0 ]; then
+					BUILD_SUCCESSFUL="yes"
+				else
+					error "Building '$TARGET' failed."
+					exit $E_BUILD
 				fi
-			done
-		fi
+			else
+				for DIR in usr/share/locale/$group opt/*/share/locale/$group; do
+					if [ -d $DIR ]; then
+						if [ "$1" != "$TARGET" ]; then
+							bsdtar -r -f $PKGMK_PACKAGE_DIR/${name}.${group}${PKGMK_BUILDVER}any.${PKGMK_PACKAGE_EXT} \
+										$DIR || abort_on_build "${name}.${group}${PKGMK_BUILDVER}any.${PKGMK_PACKAGE_EXT}"
+						fi
+						rm -rf $DIR
+					fi
+				done
+			fi
+		done
 		for DIR in usr/share/locale opt/*/share/locale; do
 			if [ -d $DIR ]; then
 				rm -rf $DIR
diff --git a/src/pkgdbh.cxx b/src/pkgdbh.cxx
index b789631..4d32f47 100644
--- a/src/pkgdbh.cxx
+++ b/src/pkgdbh.cxx
@@ -1123,6 +1123,7 @@ set< pair<string,time_t> > Pkgdbh::getPackageDependencies(const string& filename
 {
 	pair<string, pkginfo_t> packageArchive;
 	set< pair<string,time_t> > packageNameDepsBuildTime;
+	set< pair<string,time_t> > packageNameDepsBuildTimeTemp;
 	packageArchive = openArchivePackage(filename);
 #ifndef NDEBUG
 	cerr << "----> Begin of Direct Dependencies of " << packageArchive.first << endl;
@@ -1140,29 +1141,27 @@ set< pair<string,time_t> > Pkgdbh::getPackageDependencies(const string& filename
 #ifndef NDEBUG
 	cerr << "----> End of Direct Dependencies" << endl;
 #endif
-	packageNameDepsBuildTime = packageArchive.second.dependencies;
+	packageNameDepsBuildTimeTemp = packageArchive.second.dependencies;
 #ifndef NDEBUG
 	cerr << "----> Before cleanup: " << packageArchive.first << endl;
-	for (auto it : packageNameDepsBuildTime ) cerr << it.first << it.second<< " ";
+	for (auto it : packageNameDepsBuildTimeTemp ) cerr << it.first << it.second<< " ";
 	cerr << endl;
 	int i=1;
 #endif
-	for (std::set< pair<string,time_t> >::iterator it = packageNameDepsBuildTime.begin();it != packageNameDepsBuildTime.end();it++ ) {
+	for (auto it : packageNameDepsBuildTimeTemp ) {
 #ifndef NDEBUG
-		cerr << it->first << it->second << endl;
+		cerr << it.first << " " <<  it.second << endl;
 		cerr << "packageArchiveName:" <<packageArchive.first << endl;
 #endif
 		/*
-		 * If actual and already present erase the dep
+		 * If actual and already present don't add the dep
 		 */
-		if ( checkPackageNameBuildDateSame(*it)  ) {
-			packageNameDepsBuildTime.erase(it);
-#ifndef NDEBUG
-			cerr << "----> " << it->first << " deleted" << endl;
-#endif
-			it--;
-		}
+		if ( checkPackageNameBuildDateSame(it)  )
+			continue;
+		packageNameDepsBuildTime.insert(it);
+			//packageNameDepsBuildTime.erase(it);
 #ifndef NDEBUG
+		cerr << "----> " << it.first << " deleted" << endl;
 		cerr << i << endl;
 		i++;
 #endif
