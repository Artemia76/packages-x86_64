diff --git a/squashfs-tools/mksquashfs.c b/squashfs-tools/mksquashfs.c
index 2874c07..ef56b00 100644
--- a/squashfs-tools/mksquashfs.c
+++ b/squashfs-tools/mksquashfs.c
@@ -1,3 +1,4 @@
+#include <sys/sysmacros.h>
 /*
  * Create a squashfs filesystem.  This is a highly compressed read only
  * filesystem.
diff --git a/squashfs-tools/mksquashfs.h b/squashfs-tools/mksquashfs.h
index 7d50036..73686d1 100644
--- a/squashfs-tools/mksquashfs.h
+++ b/squashfs-tools/mksquashfs.h
@@ -157,7 +157,7 @@ struct append_file {
 #define INODE_HASH_MASK		(INODE_HASH_SIZE - 1)
 #define INODE_HASH(dev, ino)	(ino & INODE_HASH_MASK)
 
-struct cached_dir_index {
+extern struct cached_dir_index {
 	struct squashfs_dir_index	index;
 	char				*name;
 };
diff --git a/squashfs-tools/unsquashfs.c b/squashfs-tools/unsquashfs.c
index 3ab1f4e..61e8d8e 100644
--- a/squashfs-tools/unsquashfs.c
+++ b/squashfs-tools/unsquashfs.c
@@ -1,3 +1,4 @@
+#include <sys/sysmacros.h>
 /*
  * Unsquash a squashfs filesystem.  This is a highly compressed read only
  * filesystem.
@@ -2649,9 +2650,9 @@ void *progress_thread(void *arg)
 	signal(SIGALRM, sigalrm_handler);
 
 	itimerval.it_value.tv_sec = 0;
-	itimerval.it_value.tv_usec = 250000;
+	itimerval.it_value.tv_usec = 100000;
 	itimerval.it_interval.tv_sec = 0;
-	itimerval.it_interval.tv_usec = 250000;
+	itimerval.it_interval.tv_usec = 100000;
 	setitimer(ITIMER_REAL, &itimerval, NULL);
 
 	requested_time.tv_sec = 0;
@@ -2885,7 +2886,7 @@ void disable_progress_bar()
 		progress_bar(sym_count + dev_count + fifo_count + socket_count +
 			cur_blocks, total_inodes - total_files + total_blocks,
 			columns);
-		printf("\n");
+		//printf("\n");
 	}
 	progress_enabled = FALSE;
 	pthread_mutex_unlock(&screen_mutex);
@@ -2953,7 +2954,7 @@ void progress_bar(long long current, long long max, int columns)
 		previous = current * 100 / max;
 	}
 
-	printf("\r[");
+/*	printf("\r[");
 
 	while (hashes --)
 		putchar('=');
@@ -2964,7 +2965,8 @@ void progress_bar(long long current, long long max, int columns)
 		putchar(' ');
 
 	printf("] %*lld/%*lld", max_digits, current, max_digits, max);
-	printf(" %3lld%%", current * 100 / max);
+	printf(" %3lld%%", current * 100 / max); */
+	printf(" %3lld\n", current * 100 / max);
 	fflush(stdout);
 }
 
