diff --git a/fltk/cards_wrapper.cxx b/fltk/cards_wrapper.cxx
index 35f7dd9..15c055d 100644
--- a/fltk/cards_wrapper.cxx
+++ b/fltk/cards_wrapper.cxx
@@ -290,8 +290,9 @@ namespace cards
 			else
 				s =  i->getCollection() + "\t";
 				s += i->getName() + "\t";
-				s +=  i->getVersion() + "\t";
-				s +=  i->getDescription();
+				s += i->getDescription() + "\t";
+				s += i->getVersion() + "\t";
+				s += i->getPackager()+ "\t";
 				AvailablePackages.insert(s);
 		}
         set<string> InstalledPackages = Cards.ListOfInstalledPackages();
@@ -315,19 +316,19 @@ namespace cards
                         Pack->_name = token;
                         break;
                     }
-                    case 2: //Version
+                    case 2: //Description
                     {
-                        Pack->_version = token;
+                        Pack->_description = token;
                         break;
                     }
-                    case 3: //Packager
+                    case 3: //Version
                     {
-                        Pack->_packager = token;
+                        Pack->_version = token;
                         break;
                     }
-                    case 4: //Description
+                    case 4: //Packager
                     {
-                        Pack->_description = token;
+                        Pack->_packager = token;
                         break;
                     }
                     default:
diff --git a/fltk/table_base.cxx b/fltk/table_base.cxx
index 59ad7fc..01151ad 100644
--- a/fltk/table_base.cxx
+++ b/fltk/table_base.cxx
@@ -59,11 +59,11 @@ TableBase::TableBase(int x, int y, int w, int h, const char *l)
     callback(event_callback, reinterpret_cast<void*>(this));
     selection_color(FL_YELLOW);
     when(FL_WHEN_RELEASE|FL_WHEN_CHANGED);
-    cols(4);
+    cols(6);
     col_header(1);
     col_header_height(25);
     col_resize(1);
-    col_width_all(30);
+//    col_width_all(20);
     row_height_all(18);
     tooltip("Click on the header of the column to sort it");
     color(FL_WHITE);
@@ -137,21 +137,61 @@ void TableBase::draw_cell(TableContext context, int R, int C, int X, int Y, int
 /// Automatically set columns widths to the longuest string.
 void TableBase::autowidth(int pad)
 {
-    fl_font(FL_COURIER, 16);
-    // initialize all column widhths to lower value
+    fl_font(FL_HELVETICA_BOLD, 16);
+    // initialize all column widths to pad value
     int c;
-    for (c = 0;c<cols();c++) col_width(c,pad);
-    col_width(c-1,500);
+    for (c = 0;c<cols();c++)
+		col_width(c,pad);
+	int n=0;
     for (auto r : _rowdata)
     {
+		n++;
         int w,h;
         for  ( c=0; c<r.cols.size();c++)
         {
-            fl_measure(r.cols[c].c_str(), w, h, 0);// get pixel width of the text
-            if ( (w) > col_width(c) )
-            {
-                col_width(c, w);
-            }
+			// get pixel width of the text
+			fl_measure(r.cols[c].c_str(), w, h, 0);
+			switch (c)
+			{
+				case 0: // icon
+					col_width(c,25);
+					continue;;
+
+				case 1:  // name
+					if ( (w) > 80 )
+						col_width(c, w);
+					else
+						col_width(c,80);
+					continue;
+
+				case 2: //  version
+					if ( (w) > 80 )
+						col_width(c, w);
+					else
+						col_width(c,80);
+					continue;
+
+				case 3: //description
+					if ( (w) > 400 )
+						col_width(c, w);
+					else
+						col_width(c,400);
+					continue;
+
+				case 4: //set
+					if ( (w) > 80 )
+						col_width(c, w);
+					else
+						col_width(c,80);
+					continue;
+
+				case 5: //packager
+					if ( (w) > 120 )
+						col_width(c, w);
+					else
+						col_width(c,120);
+					continue;
+			}
         }
     }
     table_resized();
diff --git a/fltk/table_collection.cxx b/fltk/table_collection.cxx
index 1660cae..b27f6a9 100644
--- a/fltk/table_collection.cxx
+++ b/fltk/table_collection.cxx
@@ -175,7 +175,7 @@ void TableCollection::OnEvent(TableContext context, int pCol, int pRow)
                     Collec_List.insert("xfce4");
                     Collec_List.insert("xfce4-extra");
                }
-                else if (Collection=="E17")
+                else if (Collection=="E24")
                 {
                     Collec_List.insert("enlightenment");
                 }
diff --git a/fltk/table_package.cxx b/fltk/table_package.cxx
index bd0ba4d..dd0aa7b 100644
--- a/fltk/table_package.cxx
+++ b/fltk/table_package.cxx
@@ -31,9 +31,11 @@ TablePackage::TablePackage(int x, int y, int w, int h, const char *l)
     : TableBase(x,y,w,h,l)
 {
     colTitle.push_back("");
-    colTitle.push_back("Collection");
     colTitle.push_back("Name");
+    colTitle.push_back("Version");
     colTitle.push_back("Description");
+    colTitle.push_back("Set");
+    colTitle.push_back("Packager");
     _cards->refreshPackageList();
 }
 
@@ -42,14 +44,15 @@ void TablePackage::refresh_table()
 {
     clear();
     _rowdata.clear();
-    cols(4);
+    cols(6);
     vector<CPackage*> pkgList = _cards->getPackageList();
     for (auto S : pkgList)
     {
         if (_filter.length()>0)
             if ((S->getName().find(_filter)==string::npos) &&
                 (S->getSet().find(_filter)==string::npos) &&
-                (S->getDescription().find(_filter)==string::npos) ) continue;
+                (S->getDescription().find(_filter)==string::npos) &&
+                (S->getVersion().find(_filter)==string::npos) ) continue;
         // Add a new row
         Row newrow;
         newrow.data=S;
@@ -58,15 +61,18 @@ void TablePackage::refresh_table()
             newrow.cols.push_back("I");
         }
         else newrow.cols.push_back("U");
-        newrow.cols.push_back(S->getSet());
         newrow.cols.push_back(S->getName());
+        newrow.cols.push_back(S->getVersion());
         newrow.cols.push_back(S->getDescription());
+        newrow.cols.push_back(S->getSet());
+        newrow.cols.push_back(S->getPackager());
+
         _rowdata.push_back(newrow);
     }
     // How many rows we loaded
     rows((int)_rowdata.size());
-    // Auto-calculate widths, with 20 pixel padding
-    autowidth(40);
+    // Auto-calculate widths, with 50 pixel as a start
+    autowidth(50);
 }
 
 void TablePackage::OnDrawCell(TableContext context, int R, int C, int X, int Y, int W, int H)
