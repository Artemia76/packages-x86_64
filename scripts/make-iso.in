#!/usr/bin/env bash
usage() {
cat << EOF
$(basename ${0}) -f [ISO_FLAVOUR] -k [Kernel-VERSION] -v [NuTyX Version] -u [URL for package source] -o [OUTPUT iso file]

-f|--flavour => Available official flavours are STRICT, MINI (default), XFCE4, LXDE, OPENBOX, KDE5, JWM, MATE and GNOME
-k|--kernel  => Available kernels are kernel-414, kernel-419, kernel-54, kernel-510 (default) and kernel
-o|--output  => Output ISO path, default to /ISO_[ISO_FLAVOUR]/
-v|--version => Available versions are rolling (default) and testing
-u|--url     => Default URL is http://downloads.nutyx.org

EOF
}

error() {

local ERROR

ERROR=${1}

echo -e "Error during proceeding, aborting due to ${ERROR}"
exit 3
}

deps_check() {

local PACKAGE COMMAND
PACKAGE=${1}
COMMAND=${2}

RESULT=$(which ${COMMAND})
if [[ -z $RESULT ]]; then
 if [[ ${PACKAGE} == cards ]] && [[ -z ${RESULT} ]]; then
  echo -e "You're in a other distro than NuTyX, please install packages manually"
  echo -e "Packages are git cdrtools syslinux libisoburn grub dosfstools"
  exit 1
 fi
        echo -e "${PACKAGE} not installed, proceeding..."
        cards install ${PACKAGE} || error "Cards can not install ${PACKAGE}"
        RESULT_AFTER_INSTALL=$(which ${COMMAND})
        if [[ -z ${RESULT_AFTER_INSTALL} ]]; then
                echo -e "Installation of $PACKAGE failed, exiting..."
                exit 2
        fi
fi
}

while [[ $# -gt 0 ]]
do
	case ${1} in
                -f|--flavour)
                        ISO_DEST=${2}
                        shift
                ;;
                -k|--kernel)
                        KERNEL_VERSION=${2}
                        shift
                ;;
                -v|--version)
                        VERSION=${2}
                        shift
                ;;
                -u|--url)
                        URL=${2}
                        shift
                ;;
                -o|--output)
                        OUTPUT=${2}
                        shift
                ;;
                -h|--help|-u|--usage)
                        usage
                        exit 0
                ;;
        esac
        shift
done

if [[ ${UID} != 0 ]]; then
        error "Must be in Super User mode to execute the script"
fi

[[ -z ${ISO_DEST} ]] && ISO_DEST=MINI
case ${ISO_DEST} in
        STRICT|strict|MINI|mini|XFCE4|xfce4|LXDE|lxde|OPENBOX|openbox|KDE5|PLASMA5|kde5|plasma5|JWM|jwm|MATE|mate|GNOME|gnome)
                echo -e "Will build this ${ISO_DEST} flavour"
        ;;
        *)
                usage
                exit 1
        ;;
esac
[[ -z ${BUILD_ISOFOLDER} ]] && BUILD_ISOFOLDER=/ISO_${ISO_DEST}
[[ -z ${GIT_CLONE_HOME} ]] && GIT_CLONE_HOME=${HOME}
[[ -z ${GIT_FOLDER} ]] && GIT_FOLDER=${GIT_CLONE_HOME}/packages-x86_64
GIT_ISOFOLDER=$GIT_FOLDER/iso
GIT_SCRIPTSFOLDER=$GIT_FOLDER/scripts
[[ -z ${KERNEL_VERSION} ]] && KERNEL_VERSION=kernel-510
case ${KERNEL_VERSION} in
        kernel|kernel-414|kernel-419|kernel-54|kernel-510)
                echo -e "Will build this iso with ${KERNEL_VERSION}"
        ;;
        *)
                usage
                exit 1
        ;;
esac
[[ -z ${VERSION} ]] && VERSION=rolling
case ${VERSION} in
        testing|rolling)
                echo -e "Will build this iso in ${VERSION} version"
        ;;
        *)
                usage
                exit 1
        ;;
esac
[[ -z ${URL} ]] && URL=http://downloads.nutyx.org
case ${URL} in
        http://*|https://*)
                echo -e "Be sure that ${URL##*/} is accessible"
                sleep 5
        ;;
        *)
                usage
                exit 1
        ;;
esac
[[ -z $GIT_URL ]] && GIT_URL='https://github.com/NuTyX/packages-x86_64'
#[[ -z $SQUASH_COMP_OPTS ]] && SQUASH_COMP_OPTS='-comp zstd'

case $ISO_DEST in
        STRICT|strict)
                INSTALL_PACKAGES=""
        ;;
        MINI|mini)
                INSTALL_PACKAGES="cards install efibootmgr dosfstools wireless-tools wpa-supplicant gpm gpm.service \
                                linux-firmware dhcpcd systemd runyx"
        ;;
        XFCE4|xfce4)
                INSTALL_PACKAGES="cards install efibootmgr dosfstools wireless-tools wpa-supplicant gpm gpm.service \
                                lxdm xfce4 flcards make-ca mousepad orage ristretto xfburn parole xfce4-terminal gparted \
                                thunar firefox gvfs xdg-user-dirs xorg-xf86-input-synaptics xorg-xf86-input-wacom \
                                xorg-xf86-video-ati xorg-xf86-video-fbdev xorg-xf86-video-intel xorg-xf86-video-nouveau \
                                xorg-xf86-video-vesa network-manager-applet linux-firmware systemd runyx"
        ;;
        LXDE|lxde)
                INSTALL_PACKAGES="cards install efibootmgr dosfstools wireless-tools wpa-supplicant gpm.service \
                                lxde flcards make-ca leafpad lxde-appearance lxde-input lxde-randr lxde-gpicview lxde-terminal \
                                lxdm gparted pcmanfm xdg-user-dirs firefox xorg-xf86-input-synaptics xorg-xf86-input-wacom \
                                xorg-xf86-video-ati xorg-xf86-video-fbdev xorg-xf86-video-intel xorg-xf86-video-nouveau \
                                xorg-xf86-video-vesa network-manager-applet linux-firmware systemd runyx gvfs"
        ;;
        OPENBOX|openbox)
                INSTALL_PACKAGES="cards install efibootmgr dosfstools wireless-tools wpa-supplicant gpm gpm.service \
                                openbox dmenu flcards gnome-themes-extra gtk-engines gvfs inxi leafpad lxde-appearance \
                                lxde-input lxde-randr lxde-terminal lxdm murrine nitrogen ntp papirus-icon-theme pavucontrol \
                                pcmanfm scrot sound-theme-freedesktop volumeicon xdg-user-dirs xfce4-notifyd xfce4-power-manager \
                                yad xorg-xf86-input-synaptics xorg-xf86-input-wacom xorg-xf86-video-ati xorg-xf86-video-fbdev \
                                xorg-xf86-video-intel xorg-xf86-video-nouveau xorg-xf86-video-vesa network-manager-applet \
                                linux-firmware systemd runyx make-ca"
        ;;
        KDE5|PLASMA5|kde5|plasma5)
                INSTALL_PACKAGES="cards install efibootmgr dosfstools wireless-tools wpa-supplicant gpm \
                                sddm kde5 make-ca flcards firefox thunderbird xdg-user-dirs clementine k3b \
                                kdenlive vlc sound-theme-freedesktop network-manager-applet gparted xorg-setxkbmap \
                                hardinfo xorg-xf86-input-synaptics xorg-xf86-input-wacom xorg-xf86-video-ati xorg-xf86-video-fbdev \
                                xorg-xf86-video-intel xorg-xf86-video-nouveau xorg-xf86-video-vesa network-manager-applet \
                                linux-firmware systemd runyx"
        ;;
        JWM|jwm)
                INSTALL_PACKAGES="cards install efibootmgr dosfstools wireless-tools wpa-supplicant gpm \
                                jwm dmenu flcards make-ca gnome-themes-extra gtk-engines gvfs inxi leafpad \
                                lxde-appearance lxde-input lxde-randr lxde-terminal lxdm murrine nitrogen \
                                ntp papirus-icon-theme pavucontrol pcmanfm scrot sound-theme-freedesktop \
                                volumeicon xdg-user-dirs xfce4-notifyd xfce4-power-manager yad xorg-xf86-input-synaptics \
                                xorg-xf86-input-wacom xorg-xf86-video-ati xorg-xf86-video-fbdev xorg-xf86-video-intel \
                                xorg-xf86-video-nouveau xorg-xf86-video-vesa network-manager-applet \
                                linux-firmware systemd runyx"
        ;;
        MATE|mate)
                INSTALL_PACKAGES="cards install efibootmgr dosfstools wireless-tools wpa-supplicant gpm \
                                lightdm flcards make-ca mate zip unzip pciutils usbutils cups openssh gvfs dejavu-ttf \
                                system-config-printer firefox thunderbird libreoffice gnome-disk-utility hplip gimp \
                                transmission cheese cherrytree deadbeef aisleriot hardinfo gnome-mahjongg inxi gawk htop \
                                rsync tar pigz lbzip2 xdg-user-dirs sound-theme-freedesktop nano network-manager-applet \
                                alsa-utils alsa-plugins ntfs-3g vlc fuse xorg-xdpyinfo lm-sensors gparted xorg-setxkbmap \
                                ntp ntp.service xorg-xf86-input-synaptics xorg-xf86-input-wacom xorg-xf86-video-ati \
                                xorg-xf86-video-fbdev xorg-xf86-video-intel xorg-xf86-video-nouveau xorg-xf86-video-vesa \
                                network-manager-applet linux-firmware systemd runyx"
        ;;
        GNOME|gnome)
                INSTALL_PACKAGES="cards install efibootmgr dosfstools wireless-tools wpa-supplicant gpm \
                                gdm gnome make-ca flcards firefox thunderbird xdg-user-dirs vlc sound-theme-freedesktop \
                                gparted xorg-setxkbmap telegram seahorse-nautilus evolution simple-scan gnome-weather gvfs \
                                epiphany gnome-chess balsa xorg-xf86-input-synaptics xorg-xf86-input-wacom xorg-xf86-video-ati \
                                xorg-xf86-video-fbdev xorg-xf86-video-intel xorg-xf86-video-nouveau xorg-xf86-video-vesa \
                                network-manager-applet linux-firmware systemd runyx"
        ;;
        *)
                usage
                error "\n Unknown flavour"
        ;;
esac

for DEP in cards git cdrtools syslinux libisoburn grub dosfstools; do
        case ${DEP} in
                cards)
                        deps_check cards cards
                ;;
                git)
                        deps_check git git
                ;;
                cdrtools)
                        deps_check cdrtools genisoimage
                ;;
                syslinux)
                        deps_check syslinux isohybrid
                ;;
                libisoburn)
                        deps_check libisoburn xorrisofs
                ;;
                grub)
                        deps_check grub grub-install
                ;;
                dosfstools)
                        deps_check dosfstools mkfs.vfat
                ;;
        esac
done

GITCMD=$(which git)
CHROOTCMD=$(which chroot)
INSTALL_NUTYXCMD=$(which install-nutyx)

export LFS=${BUILD_ISOFOLDER}

if [[ ! -d ${GIT_FOLDER} ]]; then
        git clone ${GIT_URL} ${GIT_FOLDER} || error "Can not do git clone ${GIT_URL}"
else
        pushd ${GIT_FOLDER}
        git pull || error "Can not do git pull in ${GITFOLDER}"
        popd
fi

if [[ -d ${LFS} ]]; then
        echo -e "Folder ${LFS} already exists, deleting..."
        rm -rf ${LFS}
fi

VERSION=${VERSION} URL=${URL} KERNEL=${KERNEL_VERSION} bash ${GIT_SCRIPTSFOLDER}/install-nutyx.in

echo -e "KERNEL_VERSION=${KERNEL_VERSION}" > /tmp/buildisoscript

cat >> /tmp/buildisoscript << "EOF"
KERNEL="$(readlink /boot/${KERNEL_VERSION})"
mkinitramfs "${KERNEL/kernel-/}" -nf || exit 1
@@INSTALL_PACKAGES@@ || exit 1
cards purge
for directories in opt bin etc lib lib64 root run sbin usr var home
do
  [[ -f /ISO/boot/"$directories".squashfs ]] && rm /ISO/boot/"$directories".squashfs
  mksquashfs /"$directories" /ISO/boot/"$directories".squashfs @@SQUASH_COMP_OPTS@@
done
exit 0
EOF

sed -e "s/@@SQUASH_COMP_OPTS@@/${SQUASH_COMP_OPTS}/" -i /tmp/buildisoscript || error "Can not modify buildisoscript"
sed -e "s/@@INSTALL_PACKAGES@@/${INSTALL_PACKAGES}/" -i /tmp/buildisoscript || error "Can not modify buildisoscript"

cp -av ${GIT_ISOFOLDER} ${LFS}/ISO || error "Can not copy in $LFS/ISO"

install -vm755 /tmp/buildisoscript ${BUILD_ISOFOLDER}/tmp || error "Can not install in ${BUILD_ISOFOLDER}/tmp"

#cat ${BUILD_ISOFOLDER}/tmp/buildisoscript
chroot ${BUILD_ISOFOLDER} /bin/bash -c "/tmp/buildisoscript" || error "Chroot was not executed normally"

sed 's@SCRIPTDIR=$(pwd -P)@#SCRIPTDIR=$(pwd -P)@' ${GIT_SCRIPTSFOLDER}/mkiso > ${GIT_SCRIPTSFOLDER}/mkiso-script
sed 's@SCRIPTDIR+="/$(dirname $0)"@SCRIPTDIR="$(dirname $0)"@' -i ${GIT_SCRIPTSFOLDER}/mkiso-script

bash ${GIT_SCRIPTSFOLDER}/mkiso-script ${ISO_DEST} $(basename ${BUILD_ISOFOLDER}/lib/modules/*) || error "mkiso was not executed normally"
rm -f mkiso-script

if [[ ! -z ${OUTPUT} ]]; then
  mv ${BUILD_ISOFOLDER}/*.iso ${OUTPUT} || error "Can not move iso to ${OUTPUT}"
fi
